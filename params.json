{"name":"Vanilla","tagline":"An Opentresty Web Framework For PHPER","body":"##香草/Vanilla\r\n*香草/Vanilla是一个基于Openresty实现的高性能Web应用开发框架.*\r\n<p><a href=\"http://idevz.github.io/vanilla/\"><img border=\"0\" src=\"http://m1.sinaimg.cn/maxwidth.300/m1.sinaimg.cn/120d7329960e19cf073f264751e8d959_2043_2241.png\" alt=\"LuaRocks\" width=\"150px\"></a></p>\r\n\r\n###安装说明\r\n1. Vanilla使用Luarocks管理包依赖\r\n2. 安装Luarocks（with lua5.1）\r\n3. 使用Openresty最新稳定版\r\n\r\n#####*安装示例 / Linux平台*\r\n```\r\nyum install lua-devel luarocks  -- 需要安装Lua开发版\r\nluarocks install vanilla\r\n```\r\n#####*安装示例 / MacOSX平台*\r\n```\r\nwget lua5.1(lua5.1 源码地址)\r\n源码安装lua5.1\r\nwget luarocks（luarocks源码地址）\r\n源码安装luarocks\r\nluarocks install vanilla\r\n```\r\n#####*为何建议Lua5.1版本*\r\n1. *Openresty执行Lua需要基于Luajit加速，Luajit使用Lua5.1的ABI*\r\n2. *Luarocks会根据Lua版本识别相应的包*\r\n3. *Vanilla运行Openresty前需要基于Lua5.1做服务相关自动化配置*\r\n\r\n#####*为何建议源码安装*\r\n1. *源码安装更方便版本控制*\r\n2. *尤其MacOSX10.9后brew默认安装的Lua是5.2版本，而Openresty必须源码安装5.1*\r\n\r\n###使用\r\n#####*应用代码骨架生成及服务启动*\r\n```\r\nvanilla new app_name\r\ncd app_name\r\nvanilla start [--trace]     -- 默认运行在development环境\r\nVA_ENV=production vanilla start [--trace]  -- 运行在生产环境\r\n```\r\n#####*代码目录结构说明*\r\n```\r\n /Users/zj-git/app_name/ tree ./\r\n./\r\n├── application（应用代码主体目录）\r\n│   ├── bootstrap.lua（应用初始化 / 可选<以下未标可选为必选>）\r\n│   ├── controllers(应用业务代码主体目录)\r\n│   │   ├── error.lua（应用业务错误处理，处理本路径下相应业务报错）\r\n│   │   └── index.lua（hello world示例）\r\n│   ├── library（应用本地类包）\r\n│   ├── models（应用数据处理类）\r\n│   │   ├── dao（数据层业务处理）\r\n│   │   │   └── table.lua\r\n│   │   └── service（服务化业务处理，对DAO的再次封装）\r\n│   │       └── user.lua\r\n│   ├── nginx（*Openresty所封装Nginx请求处理各Phase）\r\n│   │   └── init.lua（*init_by_lua示例）\r\n│   ├── plugins（插件目录）\r\n│   └── views（视图层，与controllers一一对应）\r\n│       ├── error（错误模板）\r\n│       │   └── error.html\r\n│       └── index（index controller模板）\r\n│           └── index.html\r\n├── config（应用配置目录）\r\n│   ├── application.lua（应用基础配置 / 路由器、初始化等设置）\r\n│   ├── errors.lua（应用错误信息配置）\r\n│   ├── nginx.conf（nginx配置文件模板）\r\n│   ├── nginx.lua（服务各种运行环境配置 / 是否开启lua_code_cache等）\r\n│   ├── waf-regs（应用防火墙规则配置目录）\r\n│   │   ├── args\r\n│   │   ├── cookie\r\n│   │   ├── post\r\n│   │   ├── url\r\n│   │   ├── user-agent\r\n│   │   └── whiteurl\r\n│   └── waf.lua（服务防火墙配置）\r\n├── logs（日志目录）\r\n│   └── hack（攻击日志目录 / 保持可写权限）\r\n├── pub（应用Nginx配置根路径）\r\n│   └── index.lua（应用请求入口）\r\n└── spec（基于busted的单元测试路径）\r\n    ├── controllers\r\n    │   └── index_controller_spec.lua\r\n    ├── models\r\n    └── spec_helper.lua\r\n```\r\n#####*业务代码示例 IndexController*\r\n```\r\nlocal IndexController = {}\r\n\r\nfunction IndexController:index()\r\n    local view = self:getView()\r\n    local p = {}\r\n    p['vanilla'] = 'Welcome To Vanilla...'\r\n    p['zhoujing'] = 'Power by Openresty'\r\n    view:assign(p)\r\n    return view:display()\r\nend\r\n\r\nreturn IndexController\r\n```\r\n#####*模板示例 views/index/index.html*\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n<body>\r\n  <img src=\"http://m1.sinaimg.cn/maxwidth.300/m1.sinaimg.cn/ca65fa784406a36ba4fc41d14e21661e_1364_1494.png\">\r\n  <h1><a href = 'https://github.com/idevz/vanilla'>{{vanilla}}</a></h1><h5>{{zhoujing}}</h5>\r\n</body>\r\n</html>\r\n```\r\n\r\n###为什么需要Vanilla\r\n回答这个问题，我们只需要看清楚Openresty和Vanilla各自做了什么即可。\r\n#####*Openresty*\r\n* 提供了处理HTTP请求的全套整体解决方案，是一个强大的平台\r\n* 给Nginx模块开发开辟了一条全新的道路，我们可以使用Lua来处理Web请求\r\n* 形成了一个日趋完善的生态，这个生态涵盖了高性能Web服务方方面面 \r\n\r\n#####*Vanilla*\r\n* 基于Openresty开发，具备Openresty一切优良特性\r\n* 实现了自动化、配置化的Nginx指令集管理\r\n* 更合理的利用Openresty封装的8个处理请求Phase\r\n* 支持不同运行环境（开发、测试、上线）服务的自动化配置和运行管理\r\n* 使复杂的Nginx配置对Web业务开发者更透明化\r\n* 开发者不再需要了解Openresty的实现细节，而更关注业务本身\r\n* 实现了Web开发常规的调试，错误处理，异常捕获\r\n* 实现了请求的完整处理流程和插件机制，支持路由协议、模板引擎的配置化\r\n* 整合、封装了一系列Web开发常用的工具集、类库（cookie、应用防火墙等）\r\n* 功能使用方便易于扩展\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}